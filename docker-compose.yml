version: '2'
services:
  app:
    restart: always
    build: .
    expose:
      - "8000"
    container_name: "app"
    image: debian/latest
    links:
      - postgres:postgres
      - redis:redis
    depends_on:
      - postgres
      - redis
    ports:
      - '8000:8000'
    networks:
      - network1
      - nginx_network
    volumes:
      - ./:/app
      - ./data:/app/data
      - static_volume:/app/static
    env_file: .env
    entrypoint: ["sh", "/app/docker-entrypoint.sh"]
  celery_default:
    restart: always
    build: .
    container_name: "celery_default"
    entrypoint: "celery -A app worker -Q celery -l info -n celery_worker --concurrency=2"
    networks:
      - network1
    depends_on:
      - postgres
      - redis
      - app
      - celerybeat
    volumes:
      - ./data:/app/data
    links:
      - app:app
      - postgres:postgres
      - redis:redis
  celery_update:
    restart: always
    build: .
    container_name: "celery_update"
    entrypoint: "celery -A app worker -Q update -l info -n update_worker --concurrency=1"
    networks:
      - network1
    depends_on:
      - postgres
      - redis
      - app
      - celerybeat
    volumes:
      - ./data:/app/data
    links:
      - app:app
      - postgres:postgres
      - redis:redis
  celerybeat:
    restart: always
    build: .
    container_name: "celerybeat"
    entrypoint: "celery -A app beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    networks:
      - network1
    depends_on:
      - app
      - postgres
      - redis
    links:
      - app:app
      - postgres:postgres
      - redis:redis
  # https://www.distributedpython.com/2018/10/13/flower-docker/
  flower:
    image: mher/flower
    container_name: "flower"
    environment:
      - CELERY_BROKER_URL=redis://redis
      - FLOWER_PORT=8888
    ports:
      - 8888:8888
    networks:
      - network1
      - nginx_network
    depends_on:
      - redis
  redis:
    hostname: redis
    container_name: "redis"
    image: redis:alpine
    ports:
      - 6378:6379
    networks:
      - network1
  postgres:
    image: postgres:11
    container_name: "postgres"
    # https://blog.2ndquadrant.com/basics-of-tuning-checkpoints/
    command: ["-c","huge_pages=try", "-c","effective_io_concurrency=1", "-c", "max_stack_depth=6MB", "-c", "maintenance_work_mem=512MB", "-c", "temp_buffers=128MB", "-c", "shared_buffers=1024MB", "-c", "checkpoint_timeout=30min", "-c", "checkpoint_completion_target=0.93", "-c", "max_wal_size=2048MB", "-c", "effective_cache_size=1024MB", "-c", "work_mem=512MB", "-c", "max_connections=200", "-c", "random_page_cost=1"]
    shm_size: '2GB'
    environment:
      - POSTGRES_DB=anhd
      - POSTGRES_USER=anhd
    ports:
      - 1111:5432
    networks:
      - network1
volumes:
  pg_vol1:
  static_volume:
networks:
  network1:
  nginx_network:
    driver: bridge
